{"version":3,"file":"api.js","sourceRoot":"","sources":["../../sdk/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta, findTokenRecordId, tryNull } from \"@cardinal/common\";\nimport {\n  findMintManagerId,\n  MintManager,\n  PROGRAM_ID as CREATOR_STANDARD_PROGRAM_ID,\n} from \"@cardinal/creator-standard\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport { PROGRAM_ID as TOKEN_AUTH_RULES_ID } from \"@metaplex-foundation/mpl-token-auth-rules\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport {\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ComputeBudgetProgram,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  Transaction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  decodeIdlAccount,\n  fetchIdlAccount,\n  fetchIdlAccountDataById,\n} from \"./accounts\";\nimport { remainingAccountsForAuthorization } from \"./authorization\";\nimport type { PaymentShare } from \"./constants\";\nimport { rewardsCenterProgram } from \"./constants\";\nimport {\n  withRemainingAccountsForPayment,\n  withRemainingAccountsForPaymentInfo,\n  withRemainingAccountsForPaymentInfoSync,\n} from \"./payment\";\nimport {\n  findRewardEntryId,\n  findRewardReceiptId,\n  findStakeBoosterId,\n  findStakeEntryId,\n  findStakePoolId,\n  findUserEscrowId,\n} from \"./pda\";\nimport {\n  findMintEditionId,\n  findMintMetadataId,\n  METADATA_PROGRAM_ID,\n} from \"./utils\";\n\n/**\n * Stake all mints and also initialize entries if not already initialized\n *\n * @param connection\n * @param wallet\n * @param stakePoolIdentifier\n * @param mintInfos\n * @returns\n */\nexport const stake = async (\n  connection: Connection,\n  wallet: Wallet,\n  stakePoolIdentifier: string,\n  mintInfos: {\n    mintId: PublicKey;\n    tokenAccountId?: PublicKey;\n    amount?: BN;\n    fungible?: boolean;\n  }[]\n) => {\n  const stakePoolId = findStakePoolId(stakePoolIdentifier);\n  const mints = mintInfos.map(\n    ({ mintId, tokenAccountId, amount, fungible }) => {\n      return {\n        mintId,\n        amount,\n        stakeEntryId: findStakeEntryId(\n          stakePoolId,\n          mintId,\n          fungible ? wallet.publicKey : undefined\n        ),\n        mintTokenAccountId:\n          tokenAccountId ??\n          getAssociatedTokenAddressSync(mintId, wallet.publicKey, true),\n      };\n    }\n  );\n  const accountDataById = await fetchIdlAccountDataById(connection, [\n    stakePoolId,\n    ...mints.map((m) => m.stakeEntryId),\n    ...mints.map((m) => findMintManagerId(m.mintId)),\n    ...mints.map((m) => findMintMetadataId(m.mintId)),\n  ]);\n  const stakePoolData = accountDataById[stakePoolId.toString()];\n  if (!stakePoolData?.parsed || stakePoolData.type !== \"stakePool\") {\n    throw \"Stake pool not found\";\n  }\n\n  const stakePaymentInfoData = await fetchIdlAccount(\n    connection,\n    stakePoolData.parsed.stakePaymentInfo,\n    \"paymentInfo\"\n  );\n\n  const txs: Transaction[] = [];\n  for (const { mintId, mintTokenAccountId, stakeEntryId, amount } of mints) {\n    const tx = new Transaction();\n    const metadataId = findMintMetadataId(mintId);\n    const mintManagerId = findMintManagerId(mintId);\n\n    const mintManagerAccountInfo = accountDataById[mintManagerId.toString()];\n    const metadataAccountInfo = accountDataById[metadataId.toString()];\n    const metadataInfo = metadataAccountInfo\n      ? Metadata.fromAccountInfo(metadataAccountInfo)[0]\n      : undefined;\n\n    const authorizationAccounts = remainingAccountsForAuthorization(\n      stakePoolData,\n      mintId,\n      metadataInfo ?? null\n    );\n    if (!accountDataById[stakeEntryId.toString()]) {\n      const ix = await rewardsCenterProgram(connection, wallet)\n        .methods.initEntry(wallet.publicKey)\n        .accounts({\n          stakeEntry: stakeEntryId,\n          stakePool: stakePoolId,\n          stakeMint: mintId,\n          stakeMintMetadata: metadataId,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        })\n        .remainingAccounts(authorizationAccounts)\n        .instruction();\n      tx.add(ix);\n    }\n\n    const userEscrowId = findUserEscrowId(wallet.publicKey);\n\n    const remainingAccounts = [\n      ...authorizationAccounts,\n      ...withRemainingAccountsForPaymentInfoSync(\n        tx,\n        wallet.publicKey,\n        stakePaymentInfoData\n      ),\n    ];\n\n    if (mintManagerAccountInfo?.data) {\n      const mintManager = MintManager.fromAccountInfo(\n        mintManagerAccountInfo\n      )[0];\n      const stakeIx = await rewardsCenterProgram(connection, wallet)\n        .methods.stakeCcs(new BN(amount ?? 1))\n        .accounts({\n          stakePool: stakePoolId,\n          stakeEntry: stakeEntryId,\n          stakeMint: mintId,\n          stakeMintMetadata: metadataId,\n          stakeMintManager: mintManagerId,\n          stakeMintManagerRuleset: mintManager.ruleset,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: mintTokenAccountId,\n          creatorStandardProgram: CREATOR_STANDARD_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(stakeIx);\n    } else if (metadataInfo && metadataInfo.programmableConfig) {\n      const editionId = findMintEditionId(mintId);\n      const stakeTokenRecordAccountId = findTokenRecordId(\n        mintId,\n        mintTokenAccountId\n      );\n      tx.add(\n        ComputeBudgetProgram.setComputeUnitLimit({\n          units: 100000000,\n        })\n      );\n      const stakeIx = await rewardsCenterProgram(connection, wallet)\n        .methods.stakePnft()\n        .accountsStrict({\n          stakePool: stakePoolId,\n          stakeEntry: stakeEntryId,\n          stakeMint: mintId,\n          stakeMintMetadata: metadataId,\n          stakeMintEdition: editionId,\n          stakeTokenRecordAccount: stakeTokenRecordAccountId,\n          authorizationRules:\n            metadataInfo?.programmableConfig?.ruleSet ?? METADATA_PROGRAM_ID,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: mintTokenAccountId,\n          tokenMetadataProgram: METADATA_PROGRAM_ID,\n          sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(stakeIx);\n    } else {\n      const editionId = findMintEditionId(mintId);\n      const stakeIx = await rewardsCenterProgram(connection, wallet)\n        .methods.stakeEdition(new BN(amount ?? 1))\n        .accounts({\n          stakePool: stakePoolId,\n          stakeEntry: stakeEntryId,\n          stakeMint: mintId,\n          stakeMintEdition: editionId,\n          stakeMintMetadata: metadataId,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: mintTokenAccountId,\n          tokenMetadataProgram: METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(stakeIx);\n    }\n    txs.push(tx);\n  }\n  return txs;\n};\n\n/**\n * Unstake all mints and also claim rewards from any specified reward distributor(s)\n *\n * @param connection\n * @param wallet\n * @param stakePoolIdentifier\n * @param mintInfos\n * @param rewardDistributorIds\n * @returns\n */\nexport const unstake = async (\n  connection: Connection,\n  wallet: Wallet,\n  stakePoolIdentifier: string,\n  mintInfos: {\n    mintId: PublicKey;\n    fungible?: boolean;\n  }[],\n  rewardDistributorIds?: PublicKey[]\n) => {\n  const stakePoolId = findStakePoolId(stakePoolIdentifier);\n  const mints = mintInfos.map(({ mintId, fungible }) => {\n    const stakeEntryId = findStakeEntryId(\n      stakePoolId,\n      mintId,\n      fungible ? wallet.publicKey : undefined\n    );\n    return {\n      mintId,\n      stakeEntryId,\n      rewardEntryIds: rewardDistributorIds?.map((rewardDistributorId) =>\n        findRewardEntryId(rewardDistributorId, stakeEntryId)\n      ),\n    };\n  });\n\n  let accountDataById = await fetchIdlAccountDataById(connection, [\n    stakePoolId,\n    ...(rewardDistributorIds ?? []),\n    ...mints.map((m) => m.rewardEntryIds ?? []).flat(),\n    ...mints.map((m) => findMintManagerId(m.mintId)),\n    ...mints.map((m) => m.stakeEntryId),\n  ]);\n  const stakePoolData = accountDataById[stakePoolId.toString()];\n  if (!stakePoolData?.parsed || stakePoolData.type !== \"stakePool\") {\n    throw \"Stake pool not found\";\n  }\n\n  const claimRewardsPaymentInfoIds = rewardDistributorIds?.map((id) => {\n    const rewardDistributorData = accountDataById[id.toString()];\n    if (\n      rewardDistributorData &&\n      rewardDistributorData.type === \"rewardDistributor\"\n    ) {\n      return rewardDistributorData.parsed.claimRewardsPaymentInfo;\n    }\n    return null;\n  });\n  const accountDataById2 = await fetchIdlAccountDataById(connection, [\n    stakePoolData.parsed.unstakePaymentInfo,\n    ...(claimRewardsPaymentInfoIds ?? []),\n  ]);\n  accountDataById = { ...accountDataById, ...accountDataById2 };\n\n  const txs: Transaction[] = [];\n  for (const { mintId, stakeEntryId, rewardEntryIds } of mints) {\n    const tx = new Transaction();\n    const userEscrowId = findUserEscrowId(wallet.publicKey);\n    const userAtaId = getAssociatedTokenAddressSync(mintId, wallet.publicKey);\n    const stakeEntry = accountDataById[stakeEntryId.toString()];\n\n    if (\n      rewardEntryIds &&\n      rewardDistributorIds &&\n      rewardDistributorIds?.length > 0 &&\n      !(\n        stakeEntry?.type === \"stakeEntry\" &&\n        stakeEntry.parsed.cooldownStartSeconds\n      )\n    ) {\n      const ix = await rewardsCenterProgram(connection, wallet)\n        .methods.updateTotalStakeSeconds()\n        .accounts({\n          stakeEntry: stakeEntryId,\n          updater: wallet.publicKey,\n        })\n        .instruction();\n      tx.add(ix);\n\n      for (let j = 0; j < rewardDistributorIds.length; j++) {\n        const rewardDistributorId = rewardDistributorIds[j]!;\n        const rewardDistributorData =\n          accountDataById[rewardDistributorId.toString()];\n        const rewardEntryId = rewardEntryIds[j];\n        if (\n          rewardEntryId &&\n          rewardDistributorData &&\n          rewardDistributorData.type === \"rewardDistributor\"\n        ) {\n          const rewardMint = rewardDistributorData.parsed.rewardMint;\n          const rewardEntry = accountDataById[rewardEntryId?.toString()];\n          const rewardDistributorTokenAccount = getAssociatedTokenAddressSync(\n            rewardMint,\n            rewardDistributorId,\n            true\n          );\n          const userRewardMintTokenAccount = getAssociatedTokenAddressSync(\n            rewardMint,\n            wallet.publicKey,\n            true\n          );\n          if (!rewardEntry) {\n            const ix = await rewardsCenterProgram(connection, wallet)\n              .methods.initRewardEntry()\n              .accounts({\n                rewardEntry: findRewardEntryId(\n                  rewardDistributorId,\n                  stakeEntryId\n                ),\n                rewardDistributor: rewardDistributorId,\n                stakeEntry: stakeEntryId,\n                payer: wallet.publicKey,\n              })\n              .instruction();\n            tx.add(ix);\n          }\n\n          const remainingAccountsForPayment = [];\n          const claimRewardsPaymentInfo =\n            accountDataById[\n              rewardDistributorData.parsed.claimRewardsPaymentInfo.toString()\n            ];\n          if (\n            claimRewardsPaymentInfo &&\n            claimRewardsPaymentInfo.type === \"paymentInfo\"\n          ) {\n            remainingAccountsForPayment.push(\n              ...withRemainingAccountsForPaymentInfoSync(\n                tx,\n                wallet.publicKey,\n                claimRewardsPaymentInfo\n              )\n            );\n          }\n          const ix = await rewardsCenterProgram(connection, wallet)\n            .methods.claimRewards()\n            .accounts({\n              rewardEntry: findRewardEntryId(rewardDistributorId, stakeEntryId),\n              rewardDistributor: rewardDistributorId,\n              stakeEntry: stakeEntryId,\n              stakePool: stakePoolId,\n              rewardMint: rewardMint,\n              userRewardMintTokenAccount: userRewardMintTokenAccount,\n              rewardDistributorTokenAccount: rewardDistributorTokenAccount,\n              user: wallet.publicKey,\n            })\n            .remainingAccounts(remainingAccountsForPayment)\n            .instruction();\n          tx.add(ix);\n        }\n      }\n    }\n\n    const remainingAccounts = [];\n    const unstakePaymentInfo =\n      accountDataById[stakePoolData.parsed.unstakePaymentInfo.toString()];\n    if (unstakePaymentInfo && unstakePaymentInfo.type === \"paymentInfo\") {\n      remainingAccounts.push(\n        ...withRemainingAccountsForPaymentInfoSync(\n          tx,\n          wallet.publicKey,\n          unstakePaymentInfo\n        )\n      );\n    }\n    const mintManagerId = findMintManagerId(mintId);\n    const mintManagerAccountInfo = accountDataById[mintManagerId.toString()];\n    const metadataId = findMintMetadataId(mintId);\n    const metadata = await tryNull(\n      Metadata.fromAccountAddress(connection, metadataId)\n    );\n    if (mintManagerAccountInfo?.data) {\n      const ix = await rewardsCenterProgram(connection, wallet)\n        .methods.unstakeCcs()\n        .accounts({\n          stakeEntry: stakeEntryId,\n          stakePool: stakePoolId,\n          stakeMint: mintId,\n          stakeMintManager: mintManagerId,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: userAtaId,\n          creatorStandardProgram: CREATOR_STANDARD_PROGRAM_ID,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(ix);\n    } else if (metadata?.programmableConfig) {\n      const editionId = findMintEditionId(mintId);\n      const stakeTokenRecordAccountId = findTokenRecordId(mintId, userAtaId);\n      tx.add(\n        ComputeBudgetProgram.setComputeUnitLimit({\n          units: 100000000,\n        })\n      );\n      const unstakeIx = await rewardsCenterProgram(connection, wallet)\n        .methods.unstakePnft()\n        .accountsStrict({\n          stakePool: stakePoolId,\n          stakeEntry: stakeEntryId,\n          stakeMint: mintId,\n          stakeMintMetadata: metadataId,\n          stakeMintEdition: editionId,\n          stakeTokenRecordAccount: stakeTokenRecordAccountId,\n          authorizationRules:\n            metadata?.programmableConfig?.ruleSet ?? METADATA_PROGRAM_ID,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: userAtaId,\n          tokenMetadataProgram: METADATA_PROGRAM_ID,\n          sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(unstakeIx);\n    } else {\n      const editionId = findMintEditionId(mintId);\n      const ix = await rewardsCenterProgram(connection, wallet)\n        .methods.unstakeEdition()\n        .accounts({\n          stakeEntry: stakeEntryId,\n          stakePool: stakePoolId,\n          stakeMint: mintId,\n          stakeMintEdition: editionId,\n          user: wallet.publicKey,\n          userEscrow: userEscrowId,\n          userStakeMintTokenAccount: userAtaId,\n          tokenMetadataProgram: METADATA_PROGRAM_ID,\n        })\n        .remainingAccounts(remainingAccounts)\n        .instruction();\n      tx.add(ix);\n    }\n    txs.push(tx);\n  }\n  return txs;\n};\n\n/**\n * Claim reward for all mints from any specified reward distributor(s)\n *\n * @param connection\n * @param wallet\n * @param stakePoolIdentifier\n * @param mintInfos\n * @param rewardDistributorIds\n * @returns\n */\nexport const claimRewards = async (\n  connection: Connection,\n  wallet: Wallet,\n  stakePoolIdentifier: string,\n  mintInfos: {\n    mintId: PublicKey;\n    fungible?: boolean;\n  }[],\n  rewardDistributorIds?: PublicKey[],\n  claimingRewardsForUsers?: boolean\n) => {\n  const stakePoolId = findStakePoolId(stakePoolIdentifier);\n  const mints = mintInfos.map(({ mintId, fungible }) => {\n    const stakeEntryId = findStakeEntryId(\n      stakePoolId,\n      mintId,\n      fungible ? wallet.publicKey : undefined\n    );\n    return {\n      mintId,\n      stakeEntryId,\n      rewardEntryIds: rewardDistributorIds?.map((rewardDistributorId) =>\n        findRewardEntryId(rewardDistributorId, stakeEntryId)\n      ),\n    };\n  });\n\n  let accountDataById = await fetchIdlAccountDataById(connection, [\n    ...(rewardDistributorIds ?? []),\n    ...mints.map((m) => m.rewardEntryIds ?? []).flat(),\n    ...(claimingRewardsForUsers\n      ? mints.map((m) => findStakeEntryId(stakePoolId, m.mintId)).flat()\n      : []),\n  ]);\n  const claimRewardsPaymentInfoIds = rewardDistributorIds?.map((id) => {\n    const rewardDistributorData = accountDataById[id.toString()];\n    if (\n      rewardDistributorData &&\n      rewardDistributorData.type === \"rewardDistributor\"\n    ) {\n      return rewardDistributorData.parsed.claimRewardsPaymentInfo;\n    }\n    return null;\n  });\n  const accountDataById2 = await fetchIdlAccountDataById(connection, [\n    ...(claimRewardsPaymentInfoIds ?? []),\n  ]);\n  accountDataById = { ...accountDataById, ...accountDataById2 };\n\n  const txs: Transaction[] = [];\n\n  for (const { stakeEntryId, rewardEntryIds } of mints) {\n    const tx = new Transaction();\n    if (\n      rewardEntryIds &&\n      rewardDistributorIds &&\n      rewardDistributorIds?.length > 0\n    ) {\n      const ix = await rewardsCenterProgram(connection, wallet)\n        .methods.updateTotalStakeSeconds()\n        .accounts({\n          stakeEntry: stakeEntryId,\n          updater: wallet.publicKey,\n        })\n        .instruction();\n      tx.add(ix);\n      for (let j = 0; j < rewardDistributorIds.length; j++) {\n        const rewardDistributorId = rewardDistributorIds[j]!;\n        const rewardDistributorData =\n          accountDataById[rewardDistributorId.toString()];\n        const rewardEntryId = rewardEntryIds[j];\n        if (\n          rewardEntryId &&\n          rewardDistributorData &&\n          rewardDistributorData.type === \"rewardDistributor\"\n        ) {\n          const rewardMint = rewardDistributorData.parsed.rewardMint;\n          const rewardEntry = accountDataById[rewardEntryId?.toString()];\n          const rewardDistributorTokenAccount = getAssociatedTokenAddressSync(\n            rewardMint,\n            rewardDistributorId,\n            true\n          );\n          const stakeEntryDataInfo = accountDataById[stakeEntryId.toString()];\n          const userRewardMintTokenAccountOwnerId = stakeEntryDataInfo\n            ? decodeIdlAccount(stakeEntryDataInfo, \"stakeEntry\").parsed\n                .lastStaker\n            : wallet.publicKey;\n\n          const userRewardMintTokenAccount = await findAta(\n            rewardMint,\n            userRewardMintTokenAccountOwnerId,\n            true\n          );\n          tx.add(\n            createAssociatedTokenAccountIdempotentInstruction(\n              wallet.publicKey,\n              userRewardMintTokenAccount,\n              userRewardMintTokenAccountOwnerId,\n              rewardMint\n            )\n          );\n          if (!rewardEntry) {\n            const ix = await rewardsCenterProgram(connection, wallet)\n              .methods.initRewardEntry()\n              .accounts({\n                rewardEntry: findRewardEntryId(\n                  rewardDistributorId,\n                  stakeEntryId\n                ),\n                rewardDistributor: rewardDistributorId,\n                stakeEntry: stakeEntryId,\n                payer: wallet.publicKey,\n              })\n              .instruction();\n            tx.add(ix);\n          }\n\n          const remainingAccountsForPayment = [];\n          const unstakePaymentInfo =\n            accountDataById[\n              rewardDistributorData.parsed.claimRewardsPaymentInfo.toString()\n            ];\n          if (unstakePaymentInfo && unstakePaymentInfo.type === \"paymentInfo\") {\n            remainingAccountsForPayment.push(\n              ...withRemainingAccountsForPaymentInfoSync(\n                tx,\n                wallet.publicKey,\n                unstakePaymentInfo\n              )\n            );\n          }\n          const ix = await rewardsCenterProgram(connection, wallet)\n            .methods.claimRewards()\n            .accounts({\n              rewardEntry: findRewardEntryId(rewardDistributorId, stakeEntryId),\n              rewardDistributor: rewardDistributorId,\n              stakeEntry: stakeEntryId,\n              stakePool: stakePoolId,\n              rewardMint: rewardMint,\n              userRewardMintTokenAccount: userRewardMintTokenAccount,\n              rewardDistributorTokenAccount: rewardDistributorTokenAccount,\n              user: wallet.publicKey,\n            })\n            .remainingAccounts(remainingAccountsForPayment)\n            .instruction();\n          tx.add(ix);\n        }\n      }\n    }\n    txs.push(tx);\n  }\n  return txs;\n};\n\n/**\n * Claim reward receipt from a given receipt manager\n *\n * @param connection\n * @param wallet\n * @param stakePoolIdentifier\n * @param mintInfo\n * @param receiptManagerId\n * @returns\n */\nexport const claimRewardReceipt = async (\n  connection: Connection,\n  wallet: Wallet,\n  stakePoolIdentifier: string,\n  mintInfo: {\n    mintId: PublicKey;\n    fungible?: boolean;\n  },\n  receiptManagerId: PublicKey\n) => {\n  const stakePoolId = findStakePoolId(stakePoolIdentifier);\n  const stakeEntryId = findStakeEntryId(\n    stakePoolId,\n    mintInfo.mintId,\n    mintInfo.fungible ? wallet.publicKey : undefined\n  );\n  const rewardReceiptId = findRewardReceiptId(receiptManagerId, stakeEntryId);\n\n  const accountDataById = await fetchIdlAccountDataById(connection, [\n    receiptManagerId,\n    rewardReceiptId,\n  ]);\n  const receiptManagerData = accountDataById[receiptManagerId.toString()];\n  if (\n    !receiptManagerData?.parsed ||\n    receiptManagerData.type !== \"receiptManager\"\n  ) {\n    throw \"Receipt manager not found\";\n  }\n\n  const tx = new Transaction();\n  const ix = await rewardsCenterProgram(connection, wallet)\n    .methods.updateTotalStakeSeconds()\n    .accounts({\n      stakeEntry: stakeEntryId,\n      updater: wallet.publicKey,\n    })\n    .instruction();\n  tx.add(ix);\n  if (!accountDataById[rewardReceiptId.toString()]?.parsed) {\n    const ix = await rewardsCenterProgram(connection, wallet)\n      .methods.initRewardReceipt()\n      .accounts({\n        rewardReceipt: rewardReceiptId,\n        receiptManager: receiptManagerId,\n        stakeEntry: stakeEntryId,\n        payer: wallet.publicKey,\n      })\n      .instruction();\n    tx.add(ix);\n  }\n  const remainingAccountsForPayment = withRemainingAccountsForPayment(\n    tx,\n    wallet.publicKey,\n    receiptManagerData.parsed.paymentMint,\n    (receiptManagerData.parsed.paymentShares as PaymentShare[]).map(\n      (p) => p.address\n    )\n  );\n\n  const remainingAccountsForAction = await withRemainingAccountsForPaymentInfo(\n    connection,\n    tx,\n    wallet.publicKey,\n    receiptManagerData.parsed.claimActionPaymentInfo\n  );\n  const rewardReceiptIx = await rewardsCenterProgram(connection, wallet)\n    .methods.claimRewardReceipt()\n    .accounts({\n      rewardReceipt: rewardReceiptId,\n      receiptManager: receiptManagerId,\n      stakeEntry: stakeEntryId,\n      payer: wallet.publicKey,\n      claimer: wallet.publicKey,\n    })\n    .remainingAccounts([\n      ...remainingAccountsForPayment,\n      ...remainingAccountsForAction,\n    ])\n    .instruction();\n  tx.add(rewardReceiptIx);\n  return tx;\n};\n\n/**\n * Boost a given stake entry using the specified stake booster\n *\n * @param connection\n * @param wallet\n * @param stakePoolIdentifier\n * @param secondsToBoost\n * @param mintInfo\n * @param stakeBoosterIdentifer\n * @returns\n */\nexport const boost = async (\n  connection: Connection,\n  wallet: Wallet,\n  stakePoolIdentifier: string,\n  mintInfo: {\n    mintId: PublicKey;\n    fungible?: boolean;\n  },\n  secondsToBoost: number,\n  stakeBoosterIdentifer?: number\n) => {\n  const stakePoolId = findStakePoolId(stakePoolIdentifier);\n  const stakeEntryId = findStakeEntryId(\n    stakePoolId,\n    mintInfo.mintId,\n    mintInfo.fungible ? wallet.publicKey : undefined\n  );\n  const stakeBoosterId = findStakeBoosterId(\n    stakePoolId,\n    stakeBoosterIdentifer ? new BN(stakeBoosterIdentifer) : undefined\n  );\n\n  const accountDataById = await fetchIdlAccountDataById(connection, [\n    stakeBoosterId,\n  ]);\n  const stakeBoosterData = accountDataById[stakeBoosterId.toString()];\n  if (!stakeBoosterData?.parsed || stakeBoosterData.type !== \"stakeBooster\") {\n    throw \"Stake booster not found\";\n  }\n\n  const tx = new Transaction();\n  const ix = await rewardsCenterProgram(connection, wallet)\n    .methods.updateTotalStakeSeconds()\n    .accounts({\n      stakeEntry: stakeEntryId,\n      updater: wallet.publicKey,\n    })\n    .instruction();\n  tx.add(ix);\n\n  const remainingAccountsForPayment = withRemainingAccountsForPayment(\n    tx,\n    wallet.publicKey,\n    stakeBoosterData.parsed.paymentMint,\n    (stakeBoosterData.parsed.paymentShares as PaymentShare[]).map(\n      (p) => p.address\n    )\n  );\n\n  const remainingAccountsForAction = await withRemainingAccountsForPaymentInfo(\n    connection,\n    tx,\n    wallet.publicKey,\n    stakeBoosterData.parsed.boostActionPaymentInfo\n  );\n  const boostIx = await rewardsCenterProgram(connection, wallet)\n    .methods.boostStakeEntry({ secondsToBoost: new BN(secondsToBoost) })\n    .accounts({\n      stakePool: stakePoolId,\n      stakeBooster: stakeBoosterId,\n      stakeEntry: stakeEntryId,\n      stakeMint: mintInfo.mintId,\n    })\n    .remainingAccounts([\n      ...remainingAccountsForPayment,\n      ...remainingAccountsForAction,\n    ])\n    .instruction();\n  tx.add(boostIx);\n  return tx;\n};\n"]}