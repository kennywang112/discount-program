{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../sdk/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  NullableIdlAccountData,\n  NullableIdlAccountInfo,\n  ParsedIdlAccount,\n} from \"@cardinal/common\";\nimport {\n  decodeIdlAccount as cDecodeIdlAccount,\n  decodeIdlAccountUnknown as cDecodeIdlAccountUnknown,\n  fetchIdlAccount as cFetchIdlAccount,\n  fetchIdlAccountNullable as cFetchIdlAccountNullable,\n  getBatchedMultipleAccounts,\n  getProgramIdlAccounts as cGetProgramIdlAccounts,\n  tryDecodeIdlAccount as cTryDecodeIdlAccount,\n  tryDecodeIdlAccountUnknown as cTryDecodeIdlAccountUnknown,\n} from \"@cardinal/common\";\nimport type { AllAccountsMap } from \"@coral-xyz/anchor/dist/cjs/program/namespace/types\";\nimport type {\n  AccountInfo,\n  Connection,\n  GetAccountInfoConfig,\n  GetProgramAccountsConfig,\n  PublicKey,\n} from \"@solana/web3.js\";\n\nimport { REWARDS_CENTER_ADDRESS, REWARDS_CENTER_IDL } from \"./constants\";\nimport type { CardinalRewardsCenter } from \"./idl/cardinal_rewards_center\";\n\n/**\n * Fetch an account with idl types\n * @param connection\n * @param pubkey\n * @param accountType\n * @param config\n * @returns\n */\nexport const fetchIdlAccount = async <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  connection: Connection,\n  pubkey: PublicKey,\n  accountType: T,\n  config?: GetAccountInfoConfig\n) => {\n  return cFetchIdlAccount<T, CardinalRewardsCenter>(\n    connection,\n    pubkey,\n    accountType,\n    REWARDS_CENTER_IDL,\n    config\n  );\n};\n\n/**\n * Fetch a possibly null account with idl types of a specific type\n * @param connection\n * @param pubkey\n * @param accountType\n * @param config\n * @param idl\n * @returns\n */\nexport const fetchIdlAccountNullable = async <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  connection: Connection,\n  pubkey: PublicKey,\n  accountType: T,\n  config?: GetAccountInfoConfig\n) => {\n  return cFetchIdlAccountNullable<T, CardinalRewardsCenter>(\n    connection,\n    pubkey,\n    accountType,\n    REWARDS_CENTER_IDL,\n    config\n  );\n};\n\n/**\n * Decode an account with idl types of a specific type\n * @param accountInfo\n * @param accountType\n * @param idl\n * @returns\n */\nexport const decodeIdlAccount = <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  accountInfo: AccountInfo<Buffer>,\n  accountType: T\n) => {\n  return cDecodeIdlAccount<T, CardinalRewardsCenter>(\n    accountInfo,\n    accountType,\n    REWARDS_CENTER_IDL\n  );\n};\n\n/**\n * Try to decode an account with idl types of specific type\n * @param accountInfo\n * @param accountType\n * @param idl\n * @returns\n */\nexport const tryDecodeIdlAccount = <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  accountInfo: AccountInfo<Buffer>,\n  accountType: T\n) => {\n  return cTryDecodeIdlAccount<T, CardinalRewardsCenter>(\n    accountInfo,\n    accountType,\n    REWARDS_CENTER_IDL\n  );\n};\n\n/**\n * Decode an idl account of unknown type\n * @param accountInfo\n * @param idl\n * @returns\n */\nexport const decodeIdlAccountUnknown = <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  accountInfo: AccountInfo<Buffer> | null\n): AccountInfo<Buffer> & ParsedIdlAccount<CardinalRewardsCenter>[T] => {\n  return cDecodeIdlAccountUnknown<T, CardinalRewardsCenter>(\n    accountInfo,\n    REWARDS_CENTER_IDL\n  );\n};\n\n/**\n * Try to decode an account with idl types of unknown type\n * @param accountInfo\n * @param idl\n * @returns\n */\nexport const tryDecodeIdlAccountUnknown = <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  accountInfo: AccountInfo<Buffer>\n): NullableIdlAccountInfo<T, CardinalRewardsCenter> => {\n  return cTryDecodeIdlAccountUnknown<T, CardinalRewardsCenter>(\n    accountInfo,\n    REWARDS_CENTER_IDL\n  );\n};\n\n/**\n * Get program accounts of a specific idl type\n * @param connection\n * @param accountType\n * @param config\n * @param programId\n * @param idl\n * @returns\n */\nexport const getProgramIdlAccounts = async <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  connection: Connection,\n  accountType: T,\n  config?: GetProgramAccountsConfig\n) => {\n  return cGetProgramIdlAccounts<T, CardinalRewardsCenter>(\n    connection,\n    accountType,\n    REWARDS_CENTER_ADDRESS,\n    REWARDS_CENTER_IDL,\n    config\n  );\n};\n\nexport type IdlAccountDataById<\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n> = {\n  [accountId: string]: NullableIdlAccountData<T, CardinalRewardsCenter>;\n};\n\n/**\n * Decode account infos with corresponding ids\n * @param accountIds\n * @param accountInfos\n * @returns\n */\nexport const decodeAccountInfos = <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  accountIds: PublicKey[],\n  accountInfos: (AccountInfo<Buffer> | null)[]\n): IdlAccountDataById<T> => {\n  return accountInfos.reduce((acc, accountInfo, i) => {\n    if (!accountInfo?.data) return acc;\n    const accoutIdString = accountIds[i]?.toString() ?? \"\";\n    const ownerString = accountInfo.owner.toString();\n    const baseData = {\n      timestamp: Date.now(),\n      pubkey: accountIds[i]!,\n    };\n    switch (ownerString) {\n      // stakePool\n      case REWARDS_CENTER_ADDRESS.toString(): {\n        acc[accoutIdString] = {\n          ...baseData,\n          ...tryDecodeIdlAccountUnknown<T>(accountInfo),\n        };\n        return acc;\n      }\n      // fallback\n      default:\n        acc[accoutIdString] = {\n          ...baseData,\n          ...accountInfo,\n          type: \"unknown\",\n          parsed: null,\n        };\n        return acc;\n    }\n  }, {} as IdlAccountDataById<T>);\n};\n\n/**\n * Batch fetch a map of accounts and their corresponding ids\n * @param connection\n * @param ids\n * @returns\n */\nexport const fetchIdlAccountDataById = async <\n  T extends keyof AllAccountsMap<CardinalRewardsCenter>\n>(\n  connection: Connection,\n  ids: (PublicKey | null)[]\n): Promise<IdlAccountDataById<T>> => {\n  const filteredIds = ids.filter((id): id is PublicKey => id !== null);\n  const accountInfos = await getBatchedMultipleAccounts(\n    connection,\n    filteredIds\n  );\n  return decodeAccountInfos(filteredIds, accountInfos);\n};\n"]}