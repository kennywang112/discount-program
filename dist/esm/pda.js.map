{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../sdk/pda.ts"],"names":[],"mappings":"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","sourcesContent":["import { BN, utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { REWARDS_CENTER_ADDRESS } from \"./constants\";\n\nexport const STAKE_ENTRY_SEED = \"stake-entry\";\nexport const findStakeEntryId = (\n  stakePoolId: PublicKey,\n  mintId: PublicKey,\n  user?: PublicKey,\n  isFungible?: boolean\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_ENTRY_SEED),\n      stakePoolId.toBuffer(),\n      mintId.toBuffer(),\n      user && isFungible ? user.toBuffer() : PublicKey.default.toBuffer(),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const STAKE_POOL_SEED = \"stake-pool\";\nexport const findStakePoolId = (identifier: string): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_POOL_SEED),\n      utils.bytes.utf8.encode(identifier),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const STAKE_AUTHORIZATION_RECORD_SEED = \"stake-authorization\";\nexport const findStakeAuthorizationRecordId = (\n  stakePoolId: PublicKey,\n  mintId: PublicKey\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_AUTHORIZATION_RECORD_SEED),\n      stakePoolId.toBuffer(),\n      mintId.toBuffer(),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const USER_ESCROW_SEED = \"escrow\";\nexport const findUserEscrowId = (user: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(USER_ESCROW_SEED), user.toBuffer()],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const STAKE_BOOSTER_SEED = \"stake-booster\";\nexport const findStakeBoosterId = (\n  stakePoolId: PublicKey,\n  identifier?: BN\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_BOOSTER_SEED),\n      stakePoolId.toBuffer(),\n      (identifier ?? new BN(0)).toArrayLike(Buffer, \"le\", 8),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const REWARD_DISTRIBUTOR_SEED = \"reward-distributor\";\nexport const findRewardDistributorId = (\n  stakePoolId: PublicKey,\n  identifier?: BN\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_DISTRIBUTOR_SEED),\n      stakePoolId.toBuffer(),\n      (identifier ?? new BN(0)).toArrayLike(Buffer, \"le\", 8),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const REWARD_ENTRY_SEED = \"reward-entry\";\nexport const findRewardEntryId = (\n  rewardDistributorId: PublicKey,\n  stakeEntryId: PublicKey\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_ENTRY_SEED),\n      rewardDistributorId.toBuffer(),\n      stakeEntryId.toBuffer(),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const RECEIPT_MANAGER_SEED = \"receipt-manager\";\nexport const findReceiptManagerId = (\n  stakePoolId: PublicKey,\n  identifier: string\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(RECEIPT_MANAGER_SEED),\n      stakePoolId.toBuffer(),\n      utils.bytes.utf8.encode(identifier),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const REWARD_RECEIPT_SEED = \"reward-receipt\";\nexport const findRewardReceiptId = (\n  receiptManagerId: PublicKey,\n  stakeEntryId: PublicKey\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_RECEIPT_SEED),\n      receiptManagerId.toBuffer(),\n      stakeEntryId.toBuffer(),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n\nexport const PAYMENT_INFO_SEED = \"payment-info\";\nexport const findPaymentInfoId = (identifier: string): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(PAYMENT_INFO_SEED),\n      utils.bytes.utf8.encode(identifier),\n    ],\n    REWARDS_CENTER_ADDRESS\n  )[0];\n};\n"]}