{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../sdk/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,EAAE,EAAE,MAAM,OAAO,CAAC;AAE3B,OAAO,EAAE,gBAAgB,EAAE,MAAM,OAAO,CAAC;AAEzC,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAC9C,6CAA6C,CAC9C,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAC3C,UAAsB,EACtB,WAAsB,EACtB,WAAsB,EACtB,IAAe,EACf,UAAoB,EACA,EAAE;IACtB,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,UAAU,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KACnC;IACD,OAAO,gBAAgB,CAAC,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAiB,EAAa,EAAE;IACjE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACnC,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,MAAM,CAAC,QAAQ,EAAE;KAClB,EACD,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAiB,EAAa,EAAE;IAChE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACnC,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,MAAM,CAAC,QAAQ,EAAE;QACjB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KACnC,EACD,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\nimport { getMint } from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { findStakeEntryId } from \"./pda\";\n\nexport const METADATA_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\n/**\n * Convenience method to find the stake entry id from a mint\n * NOTE: This will lookup the mint on-chain to get the supply\n * @returns\n */\nexport const findStakeEntryIdFromMint = async (\n  connection: Connection,\n  stakePoolId: PublicKey,\n  stakeMintId: PublicKey,\n  user: PublicKey,\n  isFungible?: boolean\n): Promise<PublicKey> => {\n  if (isFungible === undefined) {\n    const mint = await getMint(connection, stakeMintId);\n    const supply = new BN(mint.supply.toString());\n    isFungible = supply.gt(new BN(1));\n  }\n  return findStakeEntryId(stakePoolId, stakeMintId, user, isFungible);\n};\n\nexport const findMintMetadataId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mintId.toBuffer(),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n};\n\nexport const findMintEditionId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mintId.toBuffer(),\n      utils.bytes.utf8.encode(\"edition\"),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n};\n"]}